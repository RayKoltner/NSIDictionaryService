// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NSIDictionaryService.Data;

#nullable disable

namespace NSIDictionaryService.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241217124543_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Change", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UploadInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadInfoId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DictCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "V006"
                        },
                        new
                        {
                            Id = 2,
                            Name = "V012"
                        },
                        new
                        {
                            Id = 3,
                            Name = "V021"
                        },
                        new
                        {
                            Id = 4,
                            Name = "V025"
                        });
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<int>("DictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.HasIndex("DictId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DependencyId = 1,
                            DictId = 2
                        });
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DictCodeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            DeletedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            DeletedUserId = 0,
                            DictCodeId = 1,
                            EditDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUserId = 0,
                            IsDeleted = false,
                            PropertyCode = "IDUMP",
                            PropertyName = "Code"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            DeletedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            DeletedUserId = 0,
                            DictCodeId = 1,
                            EditDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUserId = 0,
                            IsDeleted = false,
                            PropertyCode = "UMPNAME",
                            PropertyName = "Name"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            DeletedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            DeletedUserId = 0,
                            DictCodeId = 1,
                            EditDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUserId = 0,
                            IsDeleted = false,
                            PropertyCode = "DATEBEG",
                            PropertyName = "BeginDate"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            DeletedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            DeletedUserId = 0,
                            DictCodeId = 1,
                            EditDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUserId = 0,
                            IsDeleted = false,
                            PropertyCode = "DATEEND",
                            PropertyName = "EndDate"
                        });
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VersionCode")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("DictCodeId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V006Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("DictVersionId");

                    b.ToTable("V006");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V012Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DictVersionId");

                    b.ToTable("V012");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V021Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DictVersionId");

                    b.ToTable("V021");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V025Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Code")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DictVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("DictVersionId");

                    b.ToTable("V025");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.UploadInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DictCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DictVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<string>("ErrorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadMethodId")
                        .HasColumnType("int");

                    b.Property<int>("UploadResultId")
                        .HasColumnType("int");

                    b.Property<int>("UploadingUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DictVersionId");

                    b.HasIndex("UploadMethodId");

                    b.HasIndex("UploadResultId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.UploadMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ручная загрузка"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Загрузка из API"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Загрузка из XML файла"
                        });
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.UploadResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Успешно"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ошибка"
                        });
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NSIDictionaryService.Data.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Change", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.UploadInfo", "UploadInfo")
                        .WithMany()
                        .HasForeignKey("UploadInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadInfo");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictDependency", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictCode", "DependencyCode")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NSIDictionaryService.Data.Models.DictCode", "DictCode")
                        .WithMany()
                        .HasForeignKey("DictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DependencyCode");

                    b.Navigation("DictCode");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictProperty", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictCode", "DictCode")
                        .WithMany()
                        .HasForeignKey("DictCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictCode");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.DictVersion", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictCode", "DictCode")
                        .WithMany()
                        .HasForeignKey("DictCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DictCode");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V006Dictionary", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictVersion", "DictVersion")
                        .WithMany()
                        .HasForeignKey("DictVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictVersion");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V012Dictionary", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictVersion", "DictVersion")
                        .WithMany()
                        .HasForeignKey("DictVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictVersion");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V021Dictionary", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictVersion", "DictVersion")
                        .WithMany()
                        .HasForeignKey("DictVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictVersion");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.Dictionaries.V025Dictionary", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictVersion", "DictVersion")
                        .WithMany()
                        .HasForeignKey("DictVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictVersion");
                });

            modelBuilder.Entity("NSIDictionaryService.Data.Models.UploadInfo", b =>
                {
                    b.HasOne("NSIDictionaryService.Data.Models.DictVersion", "DictVersion")
                        .WithMany()
                        .HasForeignKey("DictVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NSIDictionaryService.Data.Models.UploadMethod", "UploadMethod")
                        .WithMany()
                        .HasForeignKey("UploadMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NSIDictionaryService.Data.Models.UploadResult", "UploadResult")
                        .WithMany()
                        .HasForeignKey("UploadResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictVersion");

                    b.Navigation("UploadMethod");

                    b.Navigation("UploadResult");
                });
#pragma warning restore 612, 618
        }
    }
}
